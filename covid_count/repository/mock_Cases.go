// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

// Autogenerated from `make mockery` do not edit manually

package repository

import (
	domain "github.com/maxheckel/covid_county/covid_count/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockCases is an autogenerated mock type for the Cases type
type MockCases struct {
	mock.Mock
}

// GetAllCasesForDays provides a mock function with given fields: numDays
func (_m *MockCases) GetAllCasesForDays(numDays int) ([]*domain.DailyInstances, error) {
	ret := _m.Called(numDays)

	var r0 []*domain.DailyInstances
	if rf, ok := ret.Get(0).(func(int) []*domain.DailyInstances); ok {
		r0 = rf(numDays)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DailyInstances)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(numDays)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDeathsForCounties provides a mock function with given fields: counties
func (_m *MockCases) GetAllDeathsForCounties(counties []string) ([]*domain.DailyInstances, error) {
	ret := _m.Called(counties)

	var r0 []*domain.DailyInstances
	if rf, ok := ret.Get(0).(func([]string) []*domain.DailyInstances); ok {
		r0 = rf(counties)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DailyInstances)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(counties)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDeathsForDays provides a mock function with given fields: numDays
func (_m *MockCases) GetAllDeathsForDays(numDays int) ([]*domain.DailyInstances, error) {
	ret := _m.Called(numDays)

	var r0 []*domain.DailyInstances
	if rf, ok := ret.Get(0).(func(int) []*domain.DailyInstances); ok {
		r0 = rf(numDays)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DailyInstances)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(numDays)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllHospitalizationsForDays provides a mock function with given fields: numDays
func (_m *MockCases) GetAllHospitalizationsForDays(numDays int) ([]*domain.DailyInstances, error) {
	ret := _m.Called(numDays)

	var r0 []*domain.DailyInstances
	if rf, ok := ret.Get(0).(func(int) []*domain.DailyInstances); ok {
		r0 = rf(numDays)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DailyInstances)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(numDays)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountyCasesForDays provides a mock function with given fields: numDays, county
func (_m *MockCases) GetCountyCasesForDays(numDays int, county string) ([]*domain.DailyInstances, error) {
	ret := _m.Called(numDays, county)

	var r0 []*domain.DailyInstances
	if rf, ok := ret.Get(0).(func(int, string) []*domain.DailyInstances); ok {
		r0 = rf(numDays, county)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DailyInstances)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(numDays, county)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountyDeathsForDays provides a mock function with given fields: numDays, county
func (_m *MockCases) GetCountyDeathsForDays(numDays int, county string) ([]*domain.DailyInstances, error) {
	ret := _m.Called(numDays, county)

	var r0 []*domain.DailyInstances
	if rf, ok := ret.Get(0).(func(int, string) []*domain.DailyInstances); ok {
		r0 = rf(numDays, county)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DailyInstances)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(numDays, county)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountyHospitalizationsForDays provides a mock function with given fields: numDays, county
func (_m *MockCases) GetCountyHospitalizationsForDays(numDays int, county string) ([]*domain.DailyInstances, error) {
	ret := _m.Called(numDays, county)

	var r0 []*domain.DailyInstances
	if rf, ok := ret.Get(0).(func(int, string) []*domain.DailyInstances); ok {
		r0 = rf(numDays, county)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DailyInstances)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(numDays, county)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
