// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

// Autogenerated from `make mockery` do not edit manually

package service

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockDeathLoader is an autogenerated mock type for the DeathLoader type
type MockDeathLoader struct {
	mock.Mock
}

// DownloadFiles provides a mock function with given fields: filepath, resp, extractFolder
func (_m *MockDeathLoader) DownloadFiles(filepath string, resp *http.Response, extractFolder string) ([]string, error) {
	ret := _m.Called(filepath, resp, extractFolder)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, *http.Response, string) []string); ok {
		r0 = rf(filepath, resp, extractFolder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *http.Response, string) error); ok {
		r1 = rf(filepath, resp, extractFolder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Load provides a mock function with given fields:
func (_m *MockDeathLoader) Load() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// downloadDeathFiles provides a mock function with given fields: filepath
func (_m *MockDeathLoader) downloadDeathFiles(filepath string) ([]string, error) {
	ret := _m.Called(filepath)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(filepath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filepath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getCookieAndRequestFiles provides a mock function with given fields: reqBody, client
func (_m *MockDeathLoader) getCookieAndRequestFiles(reqBody string, client *http.Client) (*http.Response, error) {
	ret := _m.Called(reqBody, client)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string, *http.Client) *http.Response); ok {
		r0 = rf(reqBody, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *http.Client) error); ok {
		r1 = rf(reqBody, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
