check-var-defined = $(if $(strip $($1)),,$(error "$1" is not defined))

# Export all variables to child processes
.EXPORT_ALL_VARIABLES:
NO_COLOR=\033[0m
OK_COLOR=\033[32;01m
ERROR_COLOR=\033[31;01m
WARN_COLOR=\033[33;01m
AUTOGENERATED_WARNING='Autogenerated from `make mockery` do not edit manually'

GO_PACKAGES = $(shell go list ./... | grep -v vendor | grep -v test | grep -v pkg | grep -v testutil | grep -v version)
GO_PACKAGES_NO_PREFIX=$(shell echo ${GO_PACKAGES//github.com\/maxheckel\//})
GO_FILES = $(shell find . -name "*.go" | grep -v vendor | grep -v mock | uniq)

LOCAL_DB_NAME := covid_county
LOCAL_DB_PORT := 9999

# The binary to build (just the basename).
BIN := covid_county

# This repo's root import path (under GOPATH).
PKG := github.com/maxheckel/covid_county

# This version-strategy uses git tags to set the version string
####VERSION ?= $(shell git describe  --match=NeVeRmAtCh --always --dirty --long)
VERSION ?= $(shell git rev-parse --short HEAD)
# Semantic version based on the current tagging
SEMVER = $(shell cat VERSION)-$(VERSION)


SRC_DIRS := cmd pkg internal # directories which hold app source (not vendored)


LDFLAGS = -ldflags="-X '${PKG}/pkg/version.Version=${SEMVER}' -X '${PKG}/pkg/version.BuildTime=$$(date -u +%FT%TZ)'"



.PHONY: clean
clean:
	rm -f .build-* .container-* .push-*


.PHONY: docker-run-api
docker-api: docker-build
	@echo "$(OK_COLOR)==> Starting local api via docker$(NO_COLOR)"
	@./scripts/docker-compose.sh kill -s SIGINT app
	@./scripts/docker-compose.sh rm -f -v app
	@./scripts/docker-compose.sh build app
	@./scripts/docker-compose.sh up -d app

docker-build:
	@echo "$(OK_COLOR)==> Building go binary for docker image: $(NO_COLOR)"
	CGO_ENABLED=0 GOOS=linux go build -o ./infra/bin/covid_county ${LDFLAGS} ./cmd/covid_county

.PHONY: docker-db
docker-db:
	@echo "$(OK_COLOR)==> Starting local db via docker$(NO_COLOR)"
	@./scripts/docker-compose.sh kill -s SIGINT db
	@./scripts/docker-compose.sh rm -f -v db
	@./scripts/docker-compose.sh build db
	@./scripts/docker-compose.sh up -d db

.PHONY: docker-logs
docker-logs: docker-run
	@echo "$(OK_COLOR)==> Running in docker: $(NO_COLOR)"
	@./scripts/docker-compose.sh logs -f --tail 10

.PHONY: docker-run
docker-run: docker-build
	@echo "$(OK_COLOR)==> Running in docker: $(NO_COLOR)"
	@./scripts/docker-compose.sh kill -s SIGINT
	@./scripts/docker-compose.sh rm -f -v
	@./scripts/docker-compose.sh build
	@./scripts/docker-compose.sh up -d

.PHONY: docker-watch
docker-watch: docker-build
	@echo "$(OK_COLOR)==> Running in docker: $(NO_COLOR)"
	@./scripts/docker-compose-watch.sh kill -s SIGINT
	@./scripts/docker-compose-watch.sh rm -f -v
	@./scripts/docker-compose-watch.sh build
	@./scripts/docker-compose-watch.sh up

.PHONY: docker-down
docker-down:
	@echo "$(OK_COLOR)==> Stopping docker: $(NO_COLOR)"
	@./scripts/docker-compose.sh down

.PHONY: format
format:
	@echo "$(OK_COLOR)==> Formatting$(NO_COLOR)"
	@goimports -l -w $(GO_FILES)

.PHONY: init
init:
	@echo "$(OK_COLOR)===> Setup dependencies$(NO_COLOR)"
	IMPORTED_PACKAGES="$(IMPORTED_PACKAGES)" ./scripts/init.sh

.PHONY: lint
lint:
	@echo "$(OK_COLOR)==> Linting$(NO_COLOR)"
	golangci-lint run $(GO_PACKAGES_NO_PREFIX)

lint-fix:
	@echo "$(OK_COLOR)==> Fixing lint issues$(NO_COLOR)"
	golangci-lint run --fix $(GO_PACKAGES_NO_PREFIX)

mocks:
	@echo "$(OK_COLOR)==> Generating Mocks$(NO_COLOR)"
	rm -rf ./testutil/externalmock/*
	go mod vendor
	mockery --name=Transaction --dir vendor/github.com/newrelic/go-agent --output ./testutil/externalmock/newrelic --outpkg newrelicmock --note $(AUTOGENERATED_WARNING)
	mockery --name=Application --dir vendor/github.com/newrelic/go-agent --output ./testutil/externalmock/newrelic --outpkg newrelicmock --note $(AUTOGENERATED_WARNING)
	mockery --all --inpackage --dir covid_county --note $(AUTOGENERATED_WARNING)

# recommended test command
.PHONY: test
test:
	@echo "$(OK_COLOR)==> Testing $(NO_COLOR)"
	gotest -v -race -coverprofile=coverage.out $(GO_PACKAGES)
